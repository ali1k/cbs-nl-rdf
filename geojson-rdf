#!/usr/bin/env node
if (process.argv.length < 4 || process.argv.length > 5) {
  die('CBS-NL geojson to RDF\n' +
      'converts a list of CBS administrative areas' +
      'to RDF TTL Format.\n\n' +
      'usage: geojson-rdf [level] [file_or_uri_to_convert]');
}
var fs = require ('fs');
var http = require ('http');
var _ = require("lodash");

var level = process.argv[2], source = process.argv[3];
// Open HTTP stream if the source is a URL
if (source.match(/^https?:\/\//))
    http.request(source, processor).end();
// Open a file stream otherwise
else
    processor(fs.readFileSync(source,'utf8'));

/* Process the specified input */
function processor(input) {
    var currentObj = JSON.parse(input);
    var prefixes = '@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> . @prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> . @prefix edm: <http://www.europeana.eu/schemas/edm/> . @prefix foaf: <http://xmlns.com/foaf/0.1/> . @prefix owl: <http://www.w3.org/2002/07/owl#> . @prefix xsd: <http://www.w3.org/2001/XMLSchema#> . @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . @prefix skos: <http://www.w3.org/2004/02/skos/core#> . @prefix dcterms: <http://purl.org/dc/terms/> . @prefix geoV: <http://geo.risis.eu/vocabulary/cbs-nl/> . @prefix geoR: <http://geo.risis.eu/cbs-nl/> .';
    console.log(prefixes);
    var output = '';
    _.forEach(currentObj.features, function(node, i) {
        if(level == 'gem'){
            output =  'geoR:' + node.properties.GM_CODE + ' a geoV:AdministrativeArea ; a geoV:Municipality ; geoV:level "2"^^xsd:integer ; dcterms:title """'+node.properties.GM_NAAM+'""" ; ';
        }else if(level == 'wijk'){
            output =  'geoR:' + node.properties.WK_CODE + ' a geoV:AdministrativeArea ; a geoV:District ; geoV:level "1"^^xsd:integer ; dcterms:title """'+node.properties.WK_NAAM+'""" ; ';
        }else if(level == 'buurt'){
            output =  'geoR:' + node.properties.BU_CODE + ' a geoV:AdministrativeArea ; a geoV:Neighbourhood ; geoV:level "3"^^xsd:integer ; dcterms:title """'+node.properties.BU_NAAM+'""" ; ';
       }
        output =  output + 'geoV:ISO "NLD" ; ';
        for(var prop in node.properties){
            if(prop !='GM_NAAM' && prop !='WK_NAAM' && prop !='BU_NAAM'){
                output =  output + 'geoV:'+prop+' "' + node.properties[prop]+ '" ; ';
            }
        }
        //console.log(node.properties.CODE_of_fu);
        //console.log(node.properties.CLASS);
        var pType = node.geometry.type;
        //console.log(pType);
        output =  output + 'geoV:shapeType "' + pType+ '" ; ';
        if(pType === 'Polygon'){
            var tmpp = [];
            _.forEach(node.geometry.coordinates[0], function(coordinate, ii) {
                tmpp.push(coordinate.join(' '));
            });
            output =  output + 'geo:geometry "POLYGON((' + tmpp.join(',') + '))"^^<http://www.openlinksw.com/schemas/virtrdf#Geometry> .';
            //console.log('POLYGON((' + tmpp.join(',') + '))');
        } else if(pType === 'MultiPolygon'){
            var tmppTop = [];
            _.forEach(node.geometry.coordinates, function(coordinateset, ii) {
                var tmpp = [];
                _.forEach(coordinateset[0], function(coordinate, iii) {
                    tmpp.push(coordinate.join(' '));
                });
                tmppTop.push('((' + tmpp.join(',') + '))');
            });
            output =  output + 'geo:geometry "MULTIPOLYGON(' + tmppTop.join(',') + ')"^^<http://www.openlinksw.com/schemas/virtrdf#Geometry> .';
            //console.log('MULTIPOLYGON(' + tmppTop.join(',') + ')');
        }
        console.log(output);
    });
}
/* Halt execution with an error message. */
function die(message) {
  console.log(message);
  process.exit(1);
}
